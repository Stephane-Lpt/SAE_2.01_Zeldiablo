@startuml
participant "main: Main" as main
participant "laby: Labyrinthe" as laby
participant "monstre : Monstre" as monstre
participant "heros : Heros" as heros
participant "cases : ArrayList<Case>" as cases

main -> laby : deplacerMonstre(Gauche)

activate laby
    laby -> laby : getSuivant(monstre.x,monstre.y, Gauche)
    laby --> laby
    laby -> laby : etreLibre(suivante[0],suivante[1])
    laby -> heros : etrePresent(suivante[0], suivante[1]
    activate heros
        laby <-- heros
    deactivate heros
    laby -> monstre : etrePresent(suivante[0], suivante[1]
    activate monstre
        laby <-- monstre
    deactivate monstre
    laby --> laby
    alt (Si la case est libre)
            laby -> monstre: monstre.x = suivante[0]
            laby -> monstre: monstre.y = suivante[1]
            laby -> laby : verifierPresenceCase(suivante[0], suivante[1])
            laby -> cases : indexOf(new Case(suivante[0], suivante[1])
            activate cases
                laby <-- cases
            deactivate cases
            alt (Une case existe à ses coordonnées)
                laby -> cases : get(index)
                activate cases
                    laby <-- cases : CasePresente : Case
                deactivate cases
                alt (la case presente est un Piège)
                    laby -> monstre : changerPv(-1)
                    activate monstre
                        laby <-- monstre
                    deactivate monstre
                    laby -> casePresente : setTrouve()
                    activate casePresente
                        laby <-- casePresente
                    deactivate casePresente
                end
                alt (la case presente est un Déclencheur)
                    laby -> monstre : changerPv(-1)
                    activate monstre
                        laby <-- monstre
                    deactivate monstre
                    laby -> casePresente : setTrouve()
                    activate casePresente
                        laby <-- casePresente
                    deactivate casePresente
                end
            end
            laby <-- laby
    end
    main <-- laby
deactivate laby

@enduml