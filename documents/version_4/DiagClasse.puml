@startuml

package javafx.application{
class Application{
}
}


package moteurJeu{

class MoteurJeu{
- <static> width: double
- <static> height: double
- <static> FPS: int
+ <static> launch(jeu: Jeu, dessin: DessinJeu)
+ <static> setTaille(width: double, height: double)
+ <static> setFPS(FPS: int)
+ start(primaryStage: Stage)
+ startAnimation(canvas: Canvas)
}

Application <|-- MoteurJeu



interface Jeu{
+ init()
+ update(secondes: double, clavier: Clavier)
+ etreFini(): boolean
}

MoteurJeu "1" --> "1" Jeu : - <static> jeu


interface DessinJeu{
+ dessinerJeu(jeu: Jeu, canvas: Canvas)
}

MoteurJeu "1" --> "1" DessinJeu : - <static> dessin

class Clavier{
- haut: boolean
- bas: boolean
- gauche: boolean
- droite: boolean
- espace : boolean
+ appuyerTouche(event : KeyEvent)
+ relacherTouche(event : KeyEvent)
}

MoteurJeu "1" --> "1" Clavier : - clavier
}

package gameLaby{

class LabyJeu{
- laby : Labyrinthe
+ labyJeu()
+ update(secondes : double, clavier : Clavier)
+ init() : boolean
+ getLaby() : Labyrinthe
}
Jeu <|.. LabyJeu

class LabyDessin{
+ dessinerJeu(jeu : Jeu, canvas : Canvas)

}

class Labyrinthe{
    + {static} MUR : char
    + {static} PJ : char
    + {static} MONSTRE : char
    + {static} VIDE : char
    + {static} HAUT : String
    + {static} BAS : String
    + {static} GAUCHE : String
    + {static} DROITE : String
    + murs : boolean
    + monstres : ArrayList<Monstre>
    + heros : Heros
    + cases : ArrayList<Case>
    + amulette : Amulette
    + depart : Entite

    + Labyrinthe(String)
    + {static} getSuivant(int, int, String) : int[]
    + deplacerPerso()
    + deplacerMonstre(Monstre m)
    + deplacerMonstreIntelligent(Monstre m)
    + faireActionMonstres()
    + verifierPresenceMonstreCaseAdjacente(int : x, int :y) : ArrayList<Monstre>
    + verifierPresenceHerosCaseAdjacente(int : x, int : y) : boolean
    + etreFini() : boolean
    + getLengthY() : int
    + getLength() : int
    + getMur(int, int) : boolean
}

class Entite{
    + x : int
    + y : int
    + Perso(int, int)
    + etrePresent(int, int) : boolean
    + getX() : int
    + getY() : int
}
abstract class Perso{
    - pv : int
    + Perso(int : dx, int : dy, int : pV)
    + abstract attaquer(Perso p)
    + changerPv(int : v)
    + getPv() : int
}

Entite <|-- Perso

class Monstre{
    + Monstre(int, int)
    + attaquer(Perso p)
}

class Heros{
    + Heros(int, int)
    + attaquer(Perso p)
}

class Case{
    - trouvee : boolean
    + Case(int dx, int dy)
    + equals(Object o) : boolean
    + setTrouvee()
    + getTrouvee() : boolean
}
Entite <|-- Case

class CasePiegee{
    + CasePiegee(int dx, int dy)
}
Case <|-- CasePiegee

class CaseDeclencheur{
    + CaseDeclencheur(int dx, int dy)
}
Case <|-- CaseDeclencheur

class Objet{
    + Object(int,int)
}
Entite <|-- Objet

class Amulette{
    - possede : boolean
    + Amulette(int,int)
    + setPossede()
    + getPossede() : boolean
}
Objet <|-- Amulette


Labyrinthe "1" -> "1" Heros: - heros
Labyrinthe "1" -> "1" Monstre : - monstre
LabyJeu "1" -> "1" Labyrinthe : - laby

Perso <|-- Monstre
Perso <|-- Heros
DessinJeu <|.. LabyDessin

}


package Graphe{

class Arc{
    - dest : String
    - cout : double
    + Arc(String, double)
    + getDest() : String
    + getCout() : double
}

class Dijkstra{
    + resoudre(Graphe, String) : Valeur
}

interface Graphe{
    + listeNoeuds() : List<String>
    + suivants(String) : List<Arc>
}

class GrapheLabyrinthe{
    + GrapheLabyrinthe(Labyrinthe)
    + listeNoeuds() : List<String>
    + suivants(String) : List<Arc>
}

class GrapheListe{
    - ensNom : List<String>
    + GrapheListe()
    + suivants(String, String, double)
    + listeNoeuds() : List<String>
    + toString() : String
}

class Noeud{
    - nom : String
    + Noeud(String)
    + equals(Object) : boolean
    + ajouterArc(String, double)
    + getArc() : List<Arc>
    + getNom() : String
}

class Valeur{
    - valeur : Map<String, Double>
    - parent : Map<String, String>
    + Valeur()
    + setValeur(String, double)
    + setParent(String, String)
    + getParent(String) : String
    + getValeur(String) : double
    + toString() : String
    + calculerChemin(String) : List<String>
}

GrapheLabyrinthe "1" -> "1" Labyrinthe : - labyrinthe
GrapheListe "1" -> "1..*" Noeud : - ensNoeud
Noeud "1" -> "1..*" Arc : - adj

Graphe <|.. GrapheLabyrinthe
Graphe <|.. GrapheListe

}


@enduml